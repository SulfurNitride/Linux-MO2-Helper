#!/bin/bash

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Define install directory
INSTALL_DIR="$HOME/mo2helper"

# Check if mo2helper directory already exists
if [ -d "$INSTALL_DIR" ]; then
    echo -e "${YELLOW}MO2 Helper is already installed at $INSTALL_DIR${NC}"
    echo -e "Would you like to update to the latest version? This will delete the existing installation."
    read -p "Update MO2 Helper? [y/N]: " update_response
    if [[ "$update_response" =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}Removing existing installation...${NC}"
        rm -rf "$INSTALL_DIR"
    else
        echo -e "Update canceled. Exiting."
        exit 0
    fi
fi

echo -e "${BLUE}Installing MO2 Helper...${NC}"

# Create directories if they don't exist
mkdir -p "$INSTALL_DIR/lib/games" "$INSTALL_DIR/lib/ttw"

# Clone the repository to a temporary location
TMP_DIR=$(mktemp -d)
echo -e "${BLUE}Cloning repository to temporary directory...${NC}"
git clone https://github.com/SulfurNitride/Linux-MO2-Helper.git "$TMP_DIR"

echo -e "${BLUE}Examining repository structure...${NC}"
find "$TMP_DIR" -type f | sort

# Check if there are artifact files (generated by Claude)
if [ -d "$TMP_DIR/artifacts" ]; then
    echo -e "${BLUE}Found artifacts directory. Looking for module files...${NC}"
    find "$TMP_DIR/artifacts" -type f | sort

    # Look for the main script (checking all possible filenames)
    echo -e "${BLUE}Looking for main script in artifacts...${NC}"
    MAIN_SCRIPT=$(find "$TMP_DIR/artifacts" -type f -name "*main*.txt" -o -name "*script*.txt" -o -name "*main-script*.txt" | head -n 1)
    if [ -n "$MAIN_SCRIPT" ]; then
        cp "$MAIN_SCRIPT" "$INSTALL_DIR/main-script.sh"
        echo -e "${GREEN}Copied main script from $MAIN_SCRIPT${NC}"
    else
        echo -e "${RED}Could not find main script in artifacts!${NC}"
    fi

    # Copy core modules with improved search patterns
    for module in core logging config error ui utils proton; do
        echo -e "${BLUE}Looking for $module module...${NC}"
        MODULE_FILE=$(find "$TMP_DIR/artifacts" -type f -name "*$module*.txt" -o -name "*$module-module*.txt" | head -n 1)
        if [ -n "$MODULE_FILE" ]; then
            cp "$MODULE_FILE" "$INSTALL_DIR/lib/$module.sh"
            echo -e "${GREEN}Copied $module module from $MODULE_FILE${NC}"
        else
            echo -e "${YELLOW}Could not find $module module${NC}"
        fi
    done

    # Copy game modules with improved search patterns
    for module in common fallout enderal bg3; do
        echo -e "${BLUE}Looking for games/$module module...${NC}"
        MODULE_FILE=$(find "$TMP_DIR/artifacts" -type f -name "*$module*.txt" -o -name "*games*$module*.txt" -o -name "*games-$module*.txt" | head -n 1)
        if [ -n "$MODULE_FILE" ]; then
            cp "$MODULE_FILE" "$INSTALL_DIR/lib/games/$module.sh"
            echo -e "${GREEN}Copied games/$module module from $MODULE_FILE${NC}"
        else
            echo -e "${YELLOW}Could not find games/$module module${NC}"
        fi
    done

    # Copy TTW modules with improved search patterns
    for module in installation hoolamike; do
        echo -e "${BLUE}Looking for ttw/$module module...${NC}"
        MODULE_FILE=$(find "$TMP_DIR/artifacts" -type f -name "*$module*.txt" -o -name "*ttw*$module*.txt" -o -name "*ttw-$module*.txt" | head -n 1)
        if [ -n "$MODULE_FILE" ]; then
            cp "$MODULE_FILE" "$INSTALL_DIR/lib/ttw/$module.sh"
            echo -e "${GREEN}Copied ttw/$module module from $MODULE_FILE${NC}"
        else
            echo -e "${YELLOW}Could not find ttw/$module module${NC}"
        fi
    done

# Check for each module directly in the repository root
# FIX: Check for main-script.sh or main-script.sh (not the same file twice)
elif [ -f "$TMP_DIR/main-script.sh" ] || [ -f "$TMP_DIR/main-script.sh" ]; then
    # Find and copy main script
    if [ -f "$TMP_DIR/main-script.sh" ]; then
        cp "$TMP_DIR/main-script.sh" "$INSTALL_DIR/main-script.sh"
        echo -e "${GREEN}Copied main-script.sh${NC}"
    elif [ -f "$TMP_DIR/main-script.sh" ]; then
        cp "$TMP_DIR/main-script.sh" "$INSTALL_DIR/main-script.sh"
        echo -e "${GREEN}Copied main-script.sh as main-script.sh${NC}"
    fi

    # Look for module files directly in repository
    for module in core logging config error ui utils proton; do
        if [ -f "$TMP_DIR/lib/$module.sh" ]; then
            cp "$TMP_DIR/lib/$module.sh" "$INSTALL_DIR/lib/$module.sh"
            echo -e "${GREEN}Copied lib/$module.sh${NC}"
        elif [ -f "$TMP_DIR/$module.sh" ]; then
            cp "$TMP_DIR/$module.sh" "$INSTALL_DIR/lib/$module.sh"
            echo -e "${GREEN}Copied $module.sh to lib/${NC}"
        else
            echo -e "${YELLOW}Could not find $module module${NC}"
        fi
    done

    # Look for game modules
    for module in common fallout enderal bg3; do
        if [ -f "$TMP_DIR/lib/games/$module.sh" ]; then
            cp "$TMP_DIR/lib/games/$module.sh" "$INSTALL_DIR/lib/games/$module.sh"
            echo -e "${GREEN}Copied lib/games/$module.sh${NC}"
        elif [ -f "$TMP_DIR/games/$module.sh" ]; then
            cp "$TMP_DIR/games/$module.sh" "$INSTALL_DIR/lib/games/$module.sh"
            echo -e "${GREEN}Copied games/$module.sh to lib/games/${NC}"
        elif [ -f "$TMP_DIR/game-$module.sh" ]; then
            cp "$TMP_DIR/game-$module.sh" "$INSTALL_DIR/lib/games/$module.sh"
            echo -e "${GREEN}Copied game-$module.sh to lib/games/${NC}"
        else
            echo -e "${YELLOW}Could not find games/$module module${NC}"
        fi
    done

    # Look for TTW modules
    for module in installation hoolamike; do
        if [ -f "$TMP_DIR/lib/ttw/$module.sh" ]; then
            cp "$TMP_DIR/lib/ttw/$module.sh" "$INSTALL_DIR/lib/ttw/$module.sh"
            echo -e "${GREEN}Copied lib/ttw/$module.sh${NC}"
        elif [ -f "$TMP_DIR/ttw/$module.sh" ]; then
            cp "$TMP_DIR/ttw/$module.sh" "$INSTALL_DIR/lib/ttw/$module.sh"
            echo -e "${GREEN}Copied ttw/$module.sh to lib/ttw/${NC}"
        elif [ -f "$TMP_DIR/ttw-$module.sh" ]; then
            cp "$TMP_DIR/ttw-$module.sh" "$INSTALL_DIR/lib/ttw/$module.sh"
            echo -e "${GREEN}Copied ttw-$module.sh to lib/ttw/${NC}"
        else
            echo -e "${YELLOW}Could not find ttw/$module module${NC}"
        fi
    done

else
    # Look for all the required files throughout the repository
    echo -e "${YELLOW}Repository structure not recognized. Looking for scripts...${NC}"

    # First, try to find the main script (fix: look for both main-script.sh and main-script.sh)
    MAIN_SCRIPT=$(find "$TMP_DIR" -name "main-script.sh" -o -name "main-script.sh" | head -n 1)
    if [ -n "$MAIN_SCRIPT" ]; then
        cp "$MAIN_SCRIPT" "$INSTALL_DIR/main-script.sh"
        echo -e "${GREEN}Copied main script from $MAIN_SCRIPT${NC}"
    else
        # Look for any shell script
        SCRIPT_FILE=$(find "$TMP_DIR" -name "*.sh" | head -n 1)
        if [ -n "$SCRIPT_FILE" ]; then
            cp "$SCRIPT_FILE" "$INSTALL_DIR/main-script.sh"
            echo -e "${GREEN}Copied $SCRIPT_FILE as main script${NC}"
        else
            echo -e "${RED}Could not find any shell scripts in the repository!${NC}"
            exit 1
        fi
    fi

    # Last resort: try to find all needed modules anywhere in the repository
    for module in core logging config error ui utils proton; do
        MODULE_FILE=$(find "$TMP_DIR" -name "$module.sh" | head -n 1)
        if [ -n "$MODULE_FILE" ]; then
            cp "$MODULE_FILE" "$INSTALL_DIR/lib/$module.sh"
            echo -e "${GREEN}Copied $module module from $MODULE_FILE${NC}"
        else
            echo -e "${YELLOW}Could not find $module module${NC}"
        fi
    done

    for module in common fallout enderal bg3; do
        MODULE_FILE=$(find "$TMP_DIR" -name "$module.sh" | head -n 1)
        if [ -n "$MODULE_FILE" ]; then
            cp "$MODULE_FILE" "$INSTALL_DIR/lib/games/$module.sh"
            echo -e "${GREEN}Copied games/$module module from $MODULE_FILE${NC}"
        else
            echo -e "${YELLOW}Could not find games/$module module${NC}"
        fi
    done

    for module in installation hoolamike; do
        MODULE_FILE=$(find "$TMP_DIR" -name "$module.sh" | head -n 1)
        if [ -n "$MODULE_FILE" ]; then
            cp "$MODULE_FILE" "$INSTALL_DIR/lib/ttw/$module.sh"
            echo -e "${GREEN}Copied ttw/$module module from $MODULE_FILE${NC}"
        else
            echo -e "${YELLOW}Could not find ttw/$module module${NC}"
        fi
    done
fi

# Check if we need to create a combined version
if [ ! -f "$INSTALL_DIR/lib/core.sh" ] || [ ! -f "$INSTALL_DIR/lib/logging.sh" ]; then
    echo -e "${YELLOW}Missing critical modules. Looking for a combined version...${NC}"

    # Look for a combined script that might have all functions
    echo -e "${BLUE}Searching for combined script...${NC}"
    find "$TMP_DIR" -type f -name "*.sh" | sort

    COMBINED_FILE=$(find "$TMP_DIR" -type f -name "*combined*.sh" -o -name "*all*.sh" -o -name "mo2helperupdated.sh" -o -name "mo2*helper*.sh" | head -n 1)

    if [ -n "$COMBINED_FILE" ]; then
        echo -e "${GREEN}Found a combined script at $COMBINED_FILE${NC}"
        cp "$COMBINED_FILE" "$INSTALL_DIR/main-script.sh"
        echo -e "${YELLOW}Using combined script instead of modular version${NC}"
    else
        echo -e "${RED}Could not find a complete set of modules or a combined script!${NC}"
        echo -e "${YELLOW}Installation may be incomplete. The script might not work.${NC}"
    fi
fi

# Make scripts executable (only if they exist)
find "$INSTALL_DIR" -name "*.sh" -exec chmod +x {} \;

# Clean up
rm -rf "$TMP_DIR"

# List all installed files
echo -e "${BLUE}Files installed:${NC}"
find "$INSTALL_DIR" -type f | sort

# Verify installation
if [ -f "$INSTALL_DIR/main-script.sh" ]; then
    echo -e "${GREEN}Installation complete!${NC}"

    # Ask to run the script automatically
    echo -e "Would you like to run MO2 Helper now?"
    read -p "Run now? [Y/n]: " run_response
    if [[ "$run_response" =~ ^[Yy]$ ]] || [[ -z "$run_response" ]]; then
        echo -e "${BLUE}Starting MO2 Helper...${NC}"
        exec "$INSTALL_DIR/main-script.sh"
    else
        echo -e "You can run the script later with: ${BLUE}$INSTALL_DIR/main-script.sh${NC}"
        if [[ "$response" =~ ^[Yy]$ ]]; then
            echo -e "Or simply type: ${BLUE}mo2helper${NC}"
        fi
    fi
else
    echo -e "${RED}Installation failed. Could not find script in installation directory.${NC}"
    echo -e "${YELLOW}Please check the repository structure and try again.${NC}"
    exit 1
fi
